{
	"openapi": "3.0.0",
	"info": {
		"title": "Warehouse Products API",
		"version": "1.0.0",
		"description": "API for managing products in a warehouse, with user authentication using JWT and role-based access control."
	},
	"servers": [
		{
			"url": "http://localhost:3000",
			"description": "Local server"
		}
	],
	"tags": [
		{
			"name": "Auth",
			"description": "Endpoints related to user authentication"
		},
		{
			"name": "Products",
			"description": "Endpoints related to product management"
		},
		{
			"name": "Roles",
			"description": "Endpoints related to role management"
		}
	],
	"paths": {
		"/auth": {
			"get": {
				"tags": ["Auth"],
				"summary": "Check user permission for an action",
				"description": "Check if the authenticated user has permission for a specific action",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "action",
						"in": "query",
						"required": true,
						"description": "The action to check permission for",
						"schema": {
							"type": "string",
							"enum": ["read", "create", "update", "delete"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Permission check result",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PermissionResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid action specified",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - User not found or not authorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/register": {
			"post": {
				"tags": ["Auth"],
				"summary": "Register a new user",
				"description": "Create a new user with a username and password. New users are assigned the 'user' role by default.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterUser"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "User already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Default role not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Auth"],
				"summary": "Login a user",
				"description": "Login with a username and password, and receive a JWT token.",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginUser"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User logged in successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid credentials",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/products": {
			"get": {
				"tags": ["Products"],
				"summary": "Get all products",
				"description": "Get a paginated list of products with optional search and filter parameters",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number",
						"schema": {
							"type": "integer",
							"default": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items per page",
						"schema": {
							"type": "integer",
							"default": 10
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "Search by product name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minPrice",
						"in": "query",
						"description": "Minimum price filter",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "maxPrice",
						"in": "query",
						"description": "Maximum price filter",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of products",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"totalProducts": {
											"type": "integer"
										},
										"page": {
											"type": "integer"
										},
										"limit": {
											"type": "integer"
										},
										"totalPages": {
											"type": "integer"
										},
										"data": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Product"
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Products"],
				"summary": "Create a new product",
				"description": "Create a new product. Only users with 'create' permission can perform this action.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Product"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Product created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Insufficient permissions"
					}
				}
			},
			"delete": {
				"tags": ["Products"],
				"summary": "Delete multiple products",
				"description": "Delete multiple products by their IDs. Only users with 'delete' permission can perform this action.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"ids": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "Products deleted successfully"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Insufficient permissions"
					}
				}
			}
		},
		"/products/{id}": {
			"get": {
				"tags": ["Products"],
				"summary": "Get a specific product",
				"description": "Get a product by its ID",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Product details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							}
						}
					},
					"404": {
						"description": "Product not found"
					}
				}
			},
			"put": {
				"tags": ["Products"],
				"summary": "Update a product",
				"description": "Update a product by its ID. Only users with 'update' permission can perform this action.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Product"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Product updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Insufficient permissions"
					},
					"404": {
						"description": "Product not found"
					}
				}
			},
			"delete": {
				"tags": ["Products"],
				"summary": "Delete a product",
				"description": "Delete a product by its ID. Only users with 'delete' permission can perform this action.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Product deleted successfully"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Insufficient permissions"
					},
					"404": {
						"description": "Product not found"
					}
				}
			}
		},
		"/roles": {
			"get": {
				"tags": ["Roles"],
				"summary": "Get all roles",
				"description": "Get a list of all roles. Only managers can access this endpoint.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "List of roles",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Role"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Only managers can access this endpoint"
					}
				}
			},
			"post": {
				"tags": ["Roles"],
				"summary": "Create a new role",
				"description": "Create a new role. Only managers can perform this action.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Role"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Role created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Role"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Only managers can perform this action"
					}
				}
			}
		},
		"/roles/{id}": {
			"put": {
				"tags": ["Roles"],
				"summary": "Update a role",
				"description": "Update a role by its ID. Only managers can perform this action.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Role"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Role updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Role"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Only managers can perform this action"
					},
					"404": {
						"description": "Role not found"
					}
				}
			},
			"delete": {
				"tags": ["Roles"],
				"summary": "Delete a role",
				"description": "Delete a role by its ID. Only managers can perform this action. Cannot delete the manager role.",
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Role deleted successfully"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"403": {
						"description": "Forbidden - Only managers can perform this action"
					},
					"404": {
						"description": "Role not found"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"RegisterUser": {
				"type": "object",
				"required": ["username", "password"],
				"properties": {
					"username": {
						"type": "string",
						"description": "Username for the new user"
					},
					"password": {
						"type": "string",
						"description": "Password for the new user"
					}
				}
			},
			"LoginUser": {
				"type": "object",
				"required": ["username", "password"],
				"properties": {
					"username": {
						"type": "string",
						"description": "Username for login"
					},
					"password": {
						"type": "string",
						"description": "Password for login"
					}
				}
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"description": "JWT token for authentication"
					},
					"username": {
						"type": "string",
						"description": "Username of the logged-in user"
					}
				}
			},
			"PermissionResponse": {
				"type": "object",
				"properties": {
					"action": {
						"type": "boolean",
						"description": "Whether the user has permission for the requested action"
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Error message"
					}
				}
			},
			"Product": {
				"type": "object",
				"required": ["name", "price", "quantity"],
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the product"
					},
					"name": {
						"type": "string",
						"description": "Name of the product"
					},
					"price": {
						"type": "number",
						"description": "Price of the product"
					},
					"quantity": {
						"type": "integer",
						"description": "Quantity of the product in stock"
					}
				}
			},
			"Role": {
				"type": "object",
				"required": ["name", "products"],
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier for the role"
					},
					"name": {
						"type": "string",
						"description": "Name of the role"
					},
					"products": {
						"type": "object",
						"properties": {
							"read": {
								"type": "boolean",
								"description": "Permission to read products"
							},
							"create": {
								"type": "boolean",
								"description": "Permission to create products"
							},
							"update": {
								"type": "boolean",
								"description": "Permission to update products"
							},
							"delete": {
								"type": "boolean",
								"description": "Permission to delete products"
							}
						}
					}
				}
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
